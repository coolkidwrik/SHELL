#!/bin/zsh

# This script is a Brain F*ck compiler.

# takes a Brain F*ck source file (with .bf extension) as input
# converts Brain F*ck commands to C and outputs the C file with .C extension
# compiles the C file and outputs the executable with .out extension

# usage: ./bfc.sh <source_file.bf>

# How it works:
# -------------------------------------
# 1. Read the Brain F*ck source file
# 2. Convert Brain F*ck commands to C code
# 3. Compile the C code

# How Brain F*ck works:
# -------------------------------------
# > increment the data pointer (to point to the next cell to the right).
# < decrement the data pointer (to point to the next cell to the left).
# + increment (increase by one) the byte at the data pointer.
# - decrement (decrease by one) the byte at the data pointer.
# . output the byte at the data pointer.
# , accept one byte of input, storing its value in the byte at the data pointer.
# [ if the byte at the data pointer is zero, then instead of moving the instruction pointer 
# forward to the next command, jump it forward to the command after the matching ] command.
# ] if the byte at the data pointer is nonzero, then instead of moving the instruction pointer
# forward to the next command, jump it back to the command after the matching [ command.



# Variables
#######################################
source_file=$1

# array to store Brain F*ck commands
# declare -A code #(can't name `commands` because it's a reserved word in zsh. I spent too much time figuring this out :[ )
code=""

# output file
output_file=${source_file%.bf}.c  # the % operator removes the .bf extension

# Helper functions
#######################################
# error check
function errorCheck {
    # check if the number of arguments is correct
    if [ $# -ne 1 ]
    then
        echo "Usage: bfc <source_file.bf>"
        exit 1
    elif [ ! -f $1 ]
    then
        # check if the source file exists
        echo "Error: Source file not found"
        exit 1
    else
        # check for bf extension
        if [[ $1 != *.bf ]]
        then
            echo "Error: Source file must have .bf extension"
            exit 1
        fi
    fi
}

# read the Brain F*ck source file
function readSource {
    # read the source file line by line
    while IFS= read -r line
    do
        # add each character to the commands array
        for (( i=0; i<${#line}; i++ ))
        do
            case ${line:$i:1} in 
            ">" | "<" | "+" | "-" | "." | "," | "[" | "]")
                # add the character to the commands array
                # line:$i:1 means get 1 character from line starting at index i
                code+=(${line:$i:1})
                ;;
            *)
                # ignore other characters. They count as comments
                ;;
            esac
        done
    done < $source_file
}

# convert Brain F*ck commands to C code
function convertToC {
    # open the output file
    echo "// This code was generated by bfc compiler" > $output_file
    echo "#include <stdio.h>" >> $output_file
    echo " " >> $output_file
    echo "int main() {" >> $output_file
    echo "char array[30000] = {0};" >> $output_file
    echo "char *ptr = array;" >> $output_file

    # loop through the commands array
    for (( i=0; i<${#code[@]}; i++ ))
    do
        case ${code[$i]} in
            ">")
                echo "++ptr;" >> $output_file
                ;;
            "<")
                echo "--ptr;" >> $output_file
                ;;
            "+")
                echo "++*ptr;" >> $output_file
                ;;
            "-")
                echo "--*ptr;" >> $output_file
                ;;
            ".")
                echo "putchar(*ptr);" >> $output_file
                ;;
            ",")
                echo "*ptr = getchar();" >> $output_file
                ;;
            "[")
                echo "while (*ptr) {" >> $output_file
                ;;
            "]")
                echo "}" >> $output_file
                ;;
        esac
    done

    # close the main function
    echo "return 0;" >> $output_file
    echo "}" >> $output_file
}

# compile the C code
function compile {
    # compile the C code and output the executable
    gcc $output_file -o ${source_file%.bf}
}

# Main
#######################################
# error check
errorCheck $source_file

# read the Brain F*ck source file
readSource

# convert Brain F*ck commands to C code
convertToC

# compile the C code
compile





